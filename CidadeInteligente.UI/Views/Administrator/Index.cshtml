@using CidadeInteligente.Application.ViewModels;
@using CidadeInteligente.Core.Enums;
@using CidadeInteligente.UI.Extensions;

@{
    this.ViewData["Title"] = "Administrativo";
}

<partial name="_Header" />

<link rel="stylesheet" href="~/css/header.css">

<style>
    table {
        width: 100% !important
    }

    th, td {
        text-align: center !important
    }
</style>

<style>
    .tab-content .container-fluid {
        border-right: 1px solid #b11116;
        border-left: 1px solid #b11116;
        border-bottom: 1px solid #b11116
    }

    .tab-pane > .container-fluid {
        overflow: auto
    }

    .nav-tabs {
        border-bottom: 1px solid #b11116
    }

    main .nav-link {
        color: black;
        border-top: 1px solid #f8868999 !important;
        border-left: 1px solid #f8868999 !important;
        border-right: 1px solid #f8868999 !important
    }

    main a.active {
        border-top: 1px solid #b11116 !important;
        border-left: 1px solid #b11116 !important;
        border-right: 1px solid #b11116 !important
    }

    .tab-pane .col-12 {
        overflow: auto
    }
</style>

<main class="container-fluid p-5">
    <div class="row">
        <div class="col-12">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" id="users-tab" data-toggle="tab" href="#users" role="tab" aria-controls="users" aria-selected="true">Usuários</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="areas-tab" data-toggle="tab" href="#areas" role="tab" aria-controls="areas" aria-selected="false">Áreas</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="courses-tab" data-toggle="tab" href="#courses" role="tab" aria-controls="courses" aria-selected="false">Cursos</a>
                </li>
            </ul>
            <div class="tab-content">
                <div class="tab-pane fade show active" id="users" role="tabpanel" aria-labelledby="users-tab">
                    <div class="container-fluid p-4">
                        <div class="row">
                            <div class="col-12 col-md-12">
                                <button class="btn btn-default-red" data-toggle="modal" data-target="#formModal">
                                    <i class="fas fa-solid fa-plus"></i>
                                    Cadastrar Usuário
                                </button>
                            </div>
                        </div>
                        <div class="row justify-content-center mt-3">
                            <div class="col-12">
                                <table class="table hover">
                                    <thead class="text-center">
                                        <tr>
                                            <td scope="col">#</td>
                                            <td scope="col">Nome</td>
                                            <td scope="col">E-mail</td>
                                            <td scope="col">Curso</td>
                                            <td scope="col">Permissão</td>
                                            <td scope="col">Ações</td>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (UserViewModel user in this.ViewBag.Users) {
                                            <tr role="row">
                                                <td>@user.UserId</td>
                                                <td>@user.Name</td>
                                                <td>@user.Email</td>
                                                <td>@user.Course</td>
                                                <td>@user.RoleDescription</td>
                                                <td>
                                                    <button id=@user.UserId class="btn btn-edit btn-strong-gray">
                                                        <i class="fa fa-solid fa-pencil"></i> Editar
                                                    </button>
                                                    <button id=@user.UserId class="btn btn-delete btn-strong-red">
                                                        <i class="fa fa-solid fa-trash"></i> Apagar
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="areas" role="tabpanel" aria-labelledby="areas-tab">
                    <div class="container-fluid p-4">
                        <div class="row">
                            <div class="col-12 col-md-12">
                                <button class="btn btn-default-red" data-toggle="modal" data-target="#formModal">
                                    <i class="fas fa-solid fa-plus"></i>
                                    Cadastrar Área
                                </button>
                            </div>
                        </div>
                        <div class="row justify-content-center mt-3">
                            <div class="col-12">
                                <table class="table hover">
                                    <thead class="text-center">
                                        <tr>
                                            <td scope="col">#</td>
                                            <td scope="col">Descrição</td>
                                            <td scope="col">Ações</td>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (AreaViewModel area in this.ViewBag.Areas) {
                                            <tr role="row">
                                                <td>@area.AreaId</td>
                                                <td>@area.Description</td>
                                                <td>
                                                    <button id=@area.AreaId class="btn btn-edit btn-strong-gray">
                                                        <i class="fa fa-solid fa-pencil"></i> Editar
                                                    </button>
                                                    <button id=@area.AreaId class="btn btn-delete btn-strong-red">
                                                        <i class="fa fa-solid fa-trash"></i> Apagar
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="courses" role="tabpanel" aria-labelledby="courses-tab">
                    <div class="container-fluid p-4">
                        <div class="row">
                            <div class="col-12 col-md-12">
                                <button class="btn btn-default-red" data-toggle="modal" data-target="#formModal">
                                    <i class="fas fa-solid fa-plus"></i>
                                    Cadastrar Curso
                                </button>
                            </div>
                        </div>
                        <div class="row justify-content-center mt-3">
                            <div class="col-12">
                                <table class="table hover">
                                    <thead class="text-center">
                                        <tr>
                                            <td scope="col">#</td>
                                            <td scope="col">Descrição</td>
                                            <td scope="col">Ações</td>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (CourseViewModel course in this.ViewBag.Courses) {
                                            <tr role="row">
                                                <td>@course.CourseId</td>
                                                <td>@course.Description</td>
                                                <td>
                                                    <button id=@course.CourseId class="btn btn-edit btn-strong-gray">
                                                        <i class="fa fa-solid fa-pencil"></i> Editar
                                                    </button>
                                                    <button id=@course.CourseId class="btn btn-delete btn-strong-red">
                                                        <i class="fa fa-solid fa-trash"></i> Apagar
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<div class="modal fade" id="formModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="userForm">
                    <input type="hidden" name="userId">
                    <div class="form-group">
                        <label class="text-dark">Nome</label>
                        <input class="form-control" maxlength="60" type="text" name="name">
                    </div>
                    <div class="form-group">
                        <label class="text-dark">E-mail</label>
                        <input class="form-control" maxlength="60" type="text" name="email">
                    </div>
                    <div id="passwordInputs">
                        <div class="form-group">
                            <label class="text-dark">Senha</label>
                            <input class="form-control" maxlength="60" type="password" name="password">
                        </div>
                        <div class="form-group">
                            <label class="text-dark">Confirmar Senha</label>
                            <input class="form-control" maxlength="60" type="password" name="confirmPassword">
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="text-dark">Curso</label>
                        <div class="form-group">
                            <select id="my-select" class="form-control" name="courseId">
                                <option selected>SELECIONE O CURSO DO USUÁRIO</option>
                                @foreach (CourseViewModel course in this.ViewBag.Courses) {
                                    <option value=@course.CourseId>@course.Description</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Tipo de Usuário</label>
                        <select class="form-control" name="role">
                            <option selected>SELECIONE A PERMISSÃO DO USUÁRIO</option>
                            <option value=@((byte)Role.Teacher)>@Role.Teacher.GetDescription()</option>
                            <option value=@((byte)Role.Student)>@Role.Student.GetDescription()</option>
                        </select>
                    </div>
                </form>
                <form id="entityForm">
                    <input type="hidden" name="entityId">
                    <div class="form-group">
                        <label class="text-dark">Descrição</label>
                        <input class="form-control" maxlength="45" type="text" name="description">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default-red btn-block btn-save">Salvar</button>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(() => {
        setDataTable();

        const getCurrentEntityName = () => $("main a.active").attr("id").split("-")[0];
        const btns = id => `
                <button id=${id} class="btn btn-edit btn-strong-gray">
                    <i class="fa fa-solid fa-pencil"></i> Editar
                </button>
                <button id=${id} class="btn btn-delete btn-strong-red">
                    <i class="fa fa-solid fa-trash"></i> Apagar
                </button>
            `;
        const resetDataTable = async () => {
            const entityName = getCurrentEntityName();
            const entities = await restAPI.get(`admin/${entityName}`);
            const dataTable = $(`div#${entityName} table`).DataTable();

            if (entities.length == 0) {
                dataTable.clear().draw();
                return;
            }

            dataTable.clear();
            entities.forEach(entity => {
                let row;
                if (entity.hasOwnProperty("userId")) {
                    const { userId, name, email, course, roleDescription } = entity;
                    row = [
                        userId,
                        name,
                        email,
                        course,
                        roleDescription,
                        btns(userId)
                    ];
                } else {
                    const { areaId, courseId, description } = entity;
                    row = [areaId ?? courseId, description, btns(areaId ?? courseId)];
                }
                dataTable.row.add(row).draw();
            });
        }
        const refreshCoursesInUserForm = async () => {
            const courses = await restAPI.get("admin/courses");
            $("select[name=courseId] option").remove();
            $("select[name=courseId]").append(courses.reduce((acc, { courseId, description }) => acc + `<option value=${courseId}>${description}</option>`, ""));
        }

        $(".btn-save").click(async () => {
            const entityName = getCurrentEntityName();
            if (entityName == "users") {
                if ($("input[name=userId]").val().trim() == "") {
                    formHasEmptyField($("form#userForm").serializeArray().slice(1, -1));

                    if ($($("input[type=password")[0]).val().trim() != $($("input[type=password")[1]).val().trim()) {
                        sweetAlert("error", "As senhas não conferem");
                        return;
                    }

                    sweetAlertAwait("Cadastrando usuário");
                    const { status, body } = await restAPI.post("admin/users", {
                        name: $("input[name=name]").val(),
                        email: $("input[name=email]").val(),
                        password: $("input[name=password]").val(),
                        courseId: +$("select[name=courseId]").val(),
                        role: +$("select[name=role]").val()
                    });
                    toggleExitConfirmation(false);

                    switch (status) {
                        case 201:
                            await resetDataTable();
                            sweetAlert("success", "Usuário cadastrado com sucesso!");
                            cleanAllFields();
                            $(".modal").modal("hide");
                            break;
                        case 400:
                            handleBadRequest(body);
                            break;
                        case 409:
                            sweetAlert("warning", "Este e-mail já está em uso!");
                            break;
                        case 500:
                            sweetAlert("error", "Um erro desconhecido ocorreu ao cadastrar o usuário!");
                            break;
                    }
                    return
                }

                sweetAlertAwait("Salvando alterações");
                const userId = +$("input[name=userId]").val();
                const { status, body } = await restAPI.patch("admin/users", {
                    userId,
                    name: $("input[name=name]").val().trim(),
                    email: $("input[name=email]").val().trim(),
                    courseId: +$("select[name=courseId]").val(),
                    role: +$("select[name=role]").val()
                });
                toggleExitConfirmation(false);

                switch (status) {
                    case 201:
                        await resetDataTable();
                        sweetAlert("success", "Usuário atualizado com sucesso!");
                        cleanAllFields();
                        $(".modal").modal("hide");
                        break;
                    case 400:
                        handleBadRequest(body);
                        break;
                    case 409:
                        sweetAlert("warning", "Este e-mail já está em uso!");
                        break;
                    case 500:
                        sweetAlert("error", "Um erro desconhecido ocorreu ao atualizar o usuário!");
                        break;
                }
                return;
            }

            if ($("input[name=entityId]").val().trim() == "") {
                sweetAlertAwait("Salvando registro...");
                const description = $("input[name=description]").val().trim();

                const { status, body } = await restAPI.post(`admin/${entityName}`, { description });
                toggleExitConfirmation(false);

                switch (status) {
                    case 201:
                        await resetDataTable();
                        sweetAlert("success", "Registro salvo com sucesso!");
                        cleanAllFields();
                        $(".modal").modal("hide");
                        if (entityName == "courses")
                            refreshCoursesInUserForm();
                        break;
                    case 400:
                        handleBadRequest(body);
                        break;
                    case 500:
                        sweetAlert("error", "Um erro desconhecido ocorreu ao salvar registro!");
                        break;
                }
                return;
            }

            sweetAlertAwait("Salvando alterações");
            const [entityId, description] = $(".modal form#entityForm input").toArray().map(input => input.value.trim());
            const data = { description };
            entityName == "areas"
                ? data.areaId = +entityId
                : data.courseId = +entityId;
            const { status, body } = await restAPI.patch(`admin/${entityName}`, data);
            toggleExitConfirmation(false);

            switch (status) {
                case 204:
                    await resetDataTable();
                    sweetAlert("success", "Registro atualizado com sucesso!");
                    cleanAllFields();
                    $(".modal").modal("hide");
                    if (entityName == "courses")
                        refreshCoursesInUserForm();
                    break;
                case 400:
                    handleBadRequest(body);
                    break;
                case 500:
                    sweetAlert("error", "Um erro desconhecido ocorreu ao atualizar registro!");
                    break;
            }
        });

        $("button[data-target='#formModal']").click(() => {
            if (getCurrentEntityName() == "users") {
                $("#passwordInputs").show();
                $(".modal-body form#entityForm").hide();
                $(".modal-body form#userForm").show();
            } else {
                $(".modal-body form#entityForm").show();
                $(".modal-body form#userForm").hide();
            }
            cleanAllFields();
            $(".modal-title").html("Novo registro");
        });

        $("tbody").on("click", ".btn-edit", async function () {
            sweetAlertAwait("Buscando os dados deste registro...");
            const entityName = getCurrentEntityName();
            const entity = await restAPI.get(`admin/${entityName}/${$(this).attr("id")}`);

            if (entityName == "users") {
                $("#passwordInputs").show();
                $(".modal-body form#entityForm").hide();
                $(".modal-body form#userForm").show();
                const { userId, name, email, courseId, role } = entity;
                $("#passwordInputs").hide();
                $("input[name=userId]").val(userId);
                $("input[name=name]").val(name);
                $("input[name=email]").val(email);
                $("select[name=courseId]").val(courseId);
                $("select[name=role]").val(role);
                $(".modal-title").html("Editar Usuário");
                $(".modal").modal("show");
            } else {
                $(".modal-body form#entityForm").show();
                $(".modal-body form#userForm").hide();
                const { areaId, courseId, description } = entity;
                $("input[name=entityId]").val(areaId ?? courseId);
                $("input[name=description]").val(description);
                $(".modal-title").html("Editar Registro");
                $(".modal").modal("show");
            }

            swal.close();
            toggleExitConfirmation(false);
        });

        $("tbody").on("click", ".btn-delete", async function () {
            Swal.fire({
                html: `<h2 style="color: white">Deseja mesmo excluir este registro?</h2>`,
                background: "rgb(70, 5, 7)",
                icon: "question",
                showCancelButton: true,
                allowOutsideClick: false,
                confirmButtonText: "Sim",
                confirmButtonColor: "#d9534f",
                cancelButtonText: "Não",
                cancelButtonColor: "#f0ad4e"
            }).then(async ({ value }) => {
                if (!value) return;

                sweetAlertAwait("Apagando registro...");
                const entityName = getCurrentEntityName();
                const { status } = await restAPI.delete(`admin/${entityName}/${$(this).attr("id")}`);
                toggleExitConfirmation(false);

                switch (status) {
                    case 204:
                        await resetDataTable();
                        sweetAlert("success", "Registro apagado com sucesso!");
                        if (entityName == "courses")
                            refreshCoursesInUserForm();
                        break;
                    case 404:
                        sweetAlert("warning", "Este registro não existe mais!");
                        break;
                    case 409:
                        switch (entityName) {
                            case "users":
                                sweetAlert("warning", "Este usuário está vinculado á um ou mais projetos como criador ou pessoa envolvida!");
                                break;
                            case "areas":
                                sweetAlert("warning", "Esta área está vinculada à um ou mais projetos!");
                                break;
                            default:
                                sweetAlert("warning", "Este curso está vinculado à um ou mais projetos!");
                                break;
                        }
                        break;
                    default:
                        sweetAlert("error", "Um erro desconhecido ocorreu ao apagar este registro!");
                        break;
                }
            });
        });
    });
</script>